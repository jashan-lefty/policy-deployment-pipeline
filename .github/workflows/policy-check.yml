name: OPA Policy Evaluation

on:
  push:
    paths:
      - "inputs/gcp/google_kms/google_kms_key_ring/**"
      - "policies/gcp/google_kms/google_kms_key_ring/**"
      - ".github/workflows/opa-policy-check.yml"
  workflow_dispatch:

jobs:
  kms-key-ring-policy-check:
    runs-on: ubuntu-latest

    env:
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

    steps:
      - name:  Checkout Repository
        uses: actions/checkout@v3

      - name:  Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name:  Set up OPA
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
          chmod +x opa
          sudo mv opa /usr/local/bin/

      - name:  Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

          # ——————————————————————————————————————————————————————————————————
    # 1️⃣ Lint: Excess & Missing Files
    #    • inputs/gcp/<service>/<resource> must have exactly:
    #        c.tf, nc.tf, config.tf, plan.json, .terraform.lock.hcl
    #    • policies/gcp/<service>/<resource> must have exactly:
    #        policy.rego, vars.rego
    # ——————————————————————————————————————————————————————————————————
      - name: Lint Excess & Missing Files
        shell: bash
        run: |
          set -euo pipefail
  
          #─── Inputs ──────────────────────────────────────────────────────────────
          echo "▶ Checking inputs/gcp for missing or extra files…"
          REQUIRED_INPUT=(c.tf nc.tf config.tf plan.json .terraform.lock.hcl)
          for svc in inputs/gcp/*; do
            [ -d "$svc" ] || continue
            for res in "$svc"/*; do
              [ -d "$res" ] || continue
              # Missing
              for f in "${REQUIRED_INPUT[@]}"; do
                if [ ! -f "$res/$f" ]; then
                  echo "::error::[inputs] Missing file $f in $res"
                  exit 1
                fi
              done
              # Excess
              find "$res" -maxdepth 1 -type f \
                ! -name "${REQUIRED_INPUT[0]}" \
                ! -name "${REQUIRED_INPUT[1]}" \
                ! -name "${REQUIRED_INPUT[2]}" \
                ! -name "${REQUIRED_INPUT[3]}" \
                ! -name "${REQUIRED_INPUT[4]}" \
                | while read extra; do
                  echo "::warning::[inputs] Unexpected file: $extra"
                done
            done
          done
  
          #─── Policies ───────────────────────────────────────────────────────────
          echo "▶ Checking policies/gcp for missing or extra files…"
          for svc in policies/gcp/*; do
            [ -d "$svc" ] || continue
            for res in "$svc"/*; do
              [ -d "$res" ] || continue
              # Missing
              for f in policy.rego vars.rego; do
                if [ ! -f "$res/$f" ]; then
                  echo "::error::[policies] Missing file $f in $res"
                  exit 1
                fi
              done
              # Excess
              find "$res" -maxdepth 1 -type f \
                ! -name "policy.rego" \
                ! -name "vars.rego" \
                | while read extra; do
                  echo "::warning::[policies] Unexpected file: $extra"
                done
            done
          done
  
      # ——————————————————————————————————————————————————————————————————
      # 2️⃣ Lint: Folder Structure
      #    • Every inputs/gcp/<svc> must have a matching policies/gcp/<svc>
      #    • The overall roots must exist
      # ——————————————————————————————————————————————————————————————————
      - name: Validate Folder Structure
        shell: bash
        run: |
          set -euo pipefail
  
          # Root existence
          for root in inputs/gcp policies/gcp; do
            if [ ! -d "$root" ]; then
              echo "::error::Required folder '$root' not found"
              exit 1
            fi
          done
  
          # Service parity
          echo "▶ Ensuring each GCP service has both inputs and policies…"
          for svc in inputs/gcp/*; do
            [ -d "$svc" ] || continue
            name=$(basename "$svc")
            if [ ! -d "policies/gcp/$name" ]; then
              echo "::error::Missing policies/gcp/$name for service '$name'"
              exit 1
            fi
          done
  
      # ——————————————————————————————————————————————————————————————————
      # 3️⃣ Lint: File Naming Conventions
      #    • Terraform files (*.tf) in inputs must be lowercase alphanumeric + underscores
      #    • Rego files in policies must be snake_case (.rego)
      # ——————————————————————————————————————————————————————————————————
      - name: Enforce File Naming Conventions
        shell: bash
        run: |
          set -euo pipefail
  
          echo "▶ Checking Terraform file names in inputs/gcp…"
          invalid_tf=$(find inputs/gcp -type f -name "*.tf" ! -regex ".*/[a-z0-9_]\+\.tf")
          if [ -n "$invalid_tf" ]; then
            echo "::error::Invalid Terraform file names:"
            echo "$invalid_tf"
            exit 1
          fi
  
          echo "▶ Checking Rego file names in policies/gcp…"
          invalid_rego=$(find policies/gcp -type f -name "*.rego" ! -regex ".*/[a-z0-9_]\+\.rego")
          if [ -n "$invalid_rego" ]; then
            echo "::error::Invalid Rego file names:"
            echo "$invalid_rego"
            exit 1
          fi


      - name: " Terraform Init & Plan & Show JSON"
        id: tf_plan
        run: |
          cd inputs/gcp/google_kms/google_kms_key_ring/location

          echo "▶ Initializing Terraform..."
          terraform init -input=false

          echo "▶ Planning..."
          terraform plan -out=plan.binary

          echo "▶ Converting plan to JSON..."
          terraform show -json plan.binary | grep -v "::debug::" | tail -n +2 > plan.json 

      - name: Run OPA policy check and enforce compliance
        shell: bash
        run: |
          result=$(opa eval \
            --data "${GITHUB_WORKSPACE}/policies/gcp" \
            --input "${GITHUB_WORKSPACE}/inputs/gcp/google_kms/google_kms_key_ring/location/plan.json" \
            --format pretty \
            "data.terraform.gcp.security.google_kms.google_kms_key_ring.location.message")
      
          echo "$result"
      
          # Detect if 'All passed' appears in any Non-Compliant line
          if echo "$result" | grep -q "Non-Compliant Resources: All passed"; then
            echo "All resources compliant."
          else
            echo "::error:: Found non-compliant resources!"
            echo "$result" | tail -n +3
            exit 1
          fi

